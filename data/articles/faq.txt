---

title: "JPEG XL FAQ"
description: Frequently asked questions about the new JPEG XL format answered here.
keyword: JPEG XL FAQ
category: articles
url: articles/faq/

datePublished: 31.10.21
dateModified: 31.10.21
questions:
  - JPEGXL FAQ
tags:
  - jxl
  - jpeg xl
sources:
  - www.google.com
  - www.google.de
relatedPosts:
  - overview
  - browser
  - imageviewer
---




## General information

### What is a JPEG XL file?

JPEG XL is a royalty-free raster graphics file format that supports both lossy and lossless compression. It is designed to outperform existing raster formats and thus to become their universal replacement.


### What is the file extension .JXL?

JPEG XL has the file extension JXL and the internet media type image/jxl. A JXL file is an image saved in the JPEG XL file format, developed by the Joint Photographic Experts Group (JPEG). It contains a photo, illustration, screenshot, or other image that has been compressed using JPEG XL compression.


### What is the JPEG XL format?

JPEG XL is a new image coding standard targeting capture, storage, archival, transmission, and distribution of photographic images as well as graphics, illustrations, mixed contents (e.g. screenshots) and animations. JPEG XL fills the specific needs for responsive web, wide colour gamut, and high dynamic range applications. It provides legacy transition features, and effective compression at high visual quality.


### Who created JPEG XL?

JPEG XL (.jxl) is the next-generation, general-purpose image compression codec by the JPEG committee. It was based on Google's Pik proposal and Cloudinary's FUIF proposal. Cloudinary, Google and the JPEG committee all have authors and developers responsible for the creation of JPEG XL.

### Who are the key contributors of JPEG XL?

Google has an experienced team partially responsible for Brotli, Woff 2.0, Butteraugli, Brunsli or Pik. Influential authors and developers include Jyrki Alakuijala, Sami Boukortt, Martin Bruse, Iulia-Maria Comsa, Alex Deymo, Moritz Firsching, Thomas Fischbacher, Sebastian Gomez, Renata Khasanova, Evgenii Kliuchnikov, Jeffrey Lim, Robert Obryk, Krzysztof Potempa, Alexander Rhatushnyak, Zoltan Szabadka, Lode Vandevenne, Luca Versari and Jan Wassenberg. Cloudinary's team members, partially responsible for FLIF / FUIF include Jon Sneyers, Eric Portis, Tal Lev-Ami and Colin Bendell. Other JPEG experts include Touradj Ebrahimi, Walt Husak, Andy Kuzma, Fernando Pereira, Antonio Pinheiro, Thomas Richter and Peter Schelkens. Please note that this list may or may not be complete.


### Why is JPEG XL called JPEG XL?

The name is easily explained. JPEG is the Joint Photographic Experts Group, which is the committee that designed the format. X is part of several JPEG standards since 2000: JPEG XT, JPEG XR, JPEG XS. L means Long-term because the authors' intention for the format is to replace the legacy JPEG and last as long too.


### Why is a new image format like JPEG XL needed?

JPEG is hitting its limits for a long period. JPEG can only do 8-bit color depth, which is not enough for HDR. JPEG cannot do lossless. JPEG is not great for non-photographic images. JPEG cannot do alpha transparency. JPEG cannot do animation or multiple layers. Better compression is possible and desirable. Entropy-coding sucks. Obvious compression artifacts at lower quality sucks (noise, banding, blockiness). 


### What is the primary goal of JXL?

JPEG XL is a practical approach focused on scalable web distribution and efficient compression of high-quality images. It will provide various benefits compared to existing image formats: significantly smaller size at equivalent subjective quality; fast, parallelizable decoding and encoding configurations; features such as progressive, lossless, animation, and reversible transcoding of existing JPEG; support for high-quality applications including wide gamut, higher resolution/bit depth/dynamic range, and visually lossless coding. Additionally, a royalty-free baseline is an important goal. JPEG XL is designed to handle high-quality images particularly well. Its aim is serving the current and future needs of an increasingly rich media experience. Ideally, an image should be compressed up to a point where there is no perceptible loss of quality from the original. 


### Since when does JPEG XL exist?

In 2017, JTC1/SC29/WG1 (JPEG) issued a Call for proposals for JPEG XL – the next generation image coding standard.[4] The file format (bitstream) was frozen on December 25, 2020, meaning that the format is now guaranteed to be decodable by future releases.[5]


### What is the origin of JPEG XL?

JPEG XL is based on ideas from Google's PIK format and Cloudinary's FUIF format (which was in turn based on FLIF). However, JPEG XL can not just be seen as a combination of both formats. It took several years of shared development to combine PIK and FUIF and many improvements made along the way.


### Is JPEG XL royalty-free?

Provides a free and open source, royalty-free JPEG XL reference implementation, also available on Gitlab. 
The royalty-free patent licensing commitments made by contributors to previous standards, e.g. JPEG 2000 Part 1, have arguably been instrumental to their success. JPEG expects that similar commitments would be helpful for the adoption of a next-generation image coding standard. 
Although they can never make guarantees (patent trolls can always suddenly wake up), the contributors who created JPEG XL have agreed to license the reference implementation under the Apache 2.0 license. That means that, besides being Free and Open Source Software (FOSS), JPEG XL also comes with a royalty-free patent grant.
That’s not at all the case for the High Efficiency Image File Format (HEIC), which is based on the HEIF container, on which Nokia claims patents; and the High Efficiency Video Coding (HEVC) codec, which is a complete patent mess. For the AV1 Image File Format (AVIF), the patent situation looks better since it’s based on AV1, and being royalty free was a major goal of the Alliance for Open Media, which created AV1. It is not clear, though, to what extent AV1 is actually royalty free. Moreover, AVIF is based on the HEIF container so Nokia patents might apply as well.


### Is there a Standard for JPEG XL?

4 parts called
Information technology — JPEG XL Image Coding System
ISO/IEC 18181-1/2/3/4
Status :  Under development
Edition : 1


### Can I use JPEG XL?

Right now, you can use JPEG XL for whatever reason. Keep in mind that since the format just came out, support is extremely limited. Some image viewers exist. No mobile devices.


### Should I use JPEG XL?

You can use JPEG XL to store your own images if you lack space on your hard drive. You can use JPEG XL to test out the performance. Wait for more support, then go full commit!


### Should I use JPEG XL for my website?

Not yet. No browser support enabled by default. Expect support in summer 2022.


### Do I need new hardware to encode and decode JPEG XL?

JPEG XL offers significantly better image quality and compression ratios than legacy JPEG, plus a shorter specification. It is designed for computationally efficient encoding and decoding using software implementations without the need for additional hardware acceleration, even on mobile devices.
Efficient encoding and decoding without requiring specialized hardware.




## Compression

### How does JPEG XL optimize my images?

perceptually optimized reference encoder. In the reference software, encoder configuration is done by perceptual target, reliably reaching a desired visual quality, unlike the usual approach of configuring by means of bitrate or quantization settings, which results in a highly image-dependent visual quality.


### Does JPEG XL support lossless compression?

JPEG XL supports lossless compression. Even better, existing JPEG files can be losslessly transcoded to JPEG XL, significantly reducing their size.
JPEG XL is particularly effective with image compression at perceptual qualities that range from visually nearly lossless (in a side-by-side comparison), over visually completely lossless (in a flicker test, which is stricter than a side-by-side evaluation), to mathematically lossless. around 35% better compression than PNG.


### Does JPEG XL support lossy compression?

Lossy: about 60% smaller than JPEG for same visual quality


### Is JPEG XL good for low-fidelity images?

### Is JPEG XL good for medium-fidelity images?

### Is JPEG XL good for high-fidelity images?

### Is JPEG XL good for non-photographic images?

### How much file size do lossless JPEG XL save?

Lossless JPEG transcoding reduces JPEG size by around 16% to 22%.
Lossy even stronger, between 20 and 60%. Of course depending on the chosen quality and compression effort.


### How much file size do lossy JPEG XL save?

● JPEG XL is visually lossless at about half the bitrate required by JPEG.
In side-by-side comparisons, JPEG XL is visually lossless (shaded blue area) typically at similar bitrates
as HEVC-HM-Y444








## Speed

### Single-core encode speed

### Single-core decode speed

### Parallelizable

### Multi-core speed

JPEG is only singlecore. Decode is faster than JPEG on multi-core. No special-purpose hardware needed, software encode/decode is fast enough



## Limits

### What is the maximum image dimension of JPEG XL?

Image dimensions of over a billion (230-1) pixels on each side;[8

### What precision does JPEG XL have?

### What is the max bit depth of JPEG XL?

### Does JPEG XL support wide gamut?

### Does JPEG XL support HDR?

### What is the maximum number of channels for JPEG XL?

Up to 4100 channels i.e grayscale or RGB, optional alpha, and up to 4096 "extra" channels;


## Features

### Does JXL support animation?

### Does JXL support progressive decoding?

Progressive decoding (by resolution and precision);

### Does JXL support alpha transparency?

### Does JXL support depth map?

### Does JXL support overlays?

### What color spaces does JXL support?

YCgCo, RGB

### What is the XYB color space?

XYB colour space is a colour model inspired by the human visual system, facilitating perceptually
uniform quantization. It uses a gamma of 3 for compute-efficient decoding.

Human visual system based color space
Y: luma
X: difference L-M
B: S
From the definition of the XYB colorspace, it follows that a fully gray pixel will be represented as a multiple of (0, 1, 0.935669). Keeping this representation as-is is undesirable, as it transmits the luma information on two channels at the same time. Thus, JPEG XL applies a linear transformation to pixel values immediately after dequantization, adding a multiple of the Y channel to the X and B channels.
In particular, the default correlation factor is 0 for the X channel and 0.935669 for the B channel: this allows to transmit luma information using the Y channel only.
However, these factors are not necessarily optimal on areas of the image with a strong chroma component (such as, for example, fully red regions). Therefore, JPEG XL allows altering the correlation factors locally, for tiles of 64 × 64 pixels, with a dedicated control field.

### Patches

A frame can be a "reference frame" and 'Patches' from it can be used in other frames
Allows to encode repeating elements only once and reuse them many times
E.g. text: store individual letters in a spritesheet reference frame
Can use (quantized) lossless compression for crisp letters
Very effective for mixed image contents
E.g. screenshots: use lossy for photo, lossless patches for text

### Adaptive quantization

Adaptive quantization: adjust quality locally as needed. It's an algorithm that tries to optimally choose a quantizer for each macroblock using advanced math algorithms.
JPEG only allows the choice of a single quantization matrix (per channel) for the whole image. This leads to the same amount of quantization everywhere, even if some areas have more detail and may thus benefit from increased quantization.
In JPEG XL, the choice of quantization matrix is still global (for each given integral transform); however, this quantization matrix can be scaled locally, to decrease artefacts in more "complex" areas without increasing the amount of bits used in other parts of the image.
Combined with a measure of loss, this allows encoders to target a roughly uniform amount of loss across the image, avoiding large variations.

### Adaptive predictor

To improve compression ratio, legacy JPEG subtracts the value of the DC coefficient for the previously encoded block from the DC coefficient of the current block. Because of local similarities displayed by typical images, this results in significant savings.
However, this prediction mode is fairly primitive, and does not take into account the bidimensional nature of images. To address this concern, JPEG XL uses a bidimensional "adaptive" predictor, that chooses between eight different prediction modes, based on their behaviour on nearby pixels. This predictor is used for DC encoding, but also for the encoding of various control fields.
More specifically, when predicting a value in position (x,y), the adaptive predictor looks at the maximum error that each prediction mode would have produced on pixels (x-1, y), (x,y, -1) and (- 1, y - 1), and chooses the prediction mode that is expected to produce the least amount of error. If the expected error computed this way is 0, the adaptive predictor also keeps track of the number of prediction modes that are expected to reach this accuracy level. The expected error and the number of "correct" prediction modes is used to split the encoded residuals into multiple distributions. This allows significant size savings, since this procedure detects flat areas in the image and uses specific distributions for them.
A variation of this predictor is used for lossless mode. The lossless predictor uses fewer prediction modes (four instead of eight), but computes a weighted average of the predictions instead of choosing one of them.


### No Banding / DC Handler

One of the most noticeable artefacts produced by JPEG compression at lower quality is banding, the transformation of an area of the image containing a slowly varying color (such as the sky at sunset) into one that contains a few bands of the same color (see Figure 6). This creates very noticeable artefacts at the boundaries between two different bands. Banding in JPEG is typically caused by DC quantization. To avoid this effect, JPEG XL allows using finer quantization steps for encoding residuals that are close to 0 in the original image. This is in practice equivalent to using finer quantization steps in areas that are slowly varying, but without sacrificing compression ratio as much as using finer quantization on the whole image would do.
To further reduce banding in areas with steeper gradients, JPEG XL applies a selective smoothing algorithm to the DC image, that is only allowed to move values inside their quantization boundaries. If the smoothed value would be outside of the quantization boundaries, it is discarded, and the original is used.

### LF Predictions

To reduce banding further, and to make block artefacts less noticeable in the resulting image, JPEG XL estimates the low-frequency coefficients of each X × Y transform (the top-left corner of size, excluding thecorner) from the DC image. This procedure starts by extending the knowncoefficients to have size, by filling missing coefficients with zeros. It then uses the inverse of the first procedure described in Lemma 4.1 on each block to produce a 2× upsampled version of the DC image.
After applying the a smoothing algorithm similar to the one used on the DC image, the upsampled DC is converted back to DCT coefficients; the low-frequency values that are produced this way are then added to the encoded low-frequency coefficients.

### AC Encoding

JPEG always encodes AC coefficients using the so-called zig-zag order, which proceeds in order of increasing sum of coordinates in the block.
As JPEG XL uses different transform sizes, it generalizes the zig-zag order to those cases. Moreover, since this order is not necessarily optimal for a given image, it allows to encode a custom order. This custom order is encoded as a permutation of the zig-zag order, using a Lehmer15-like code to achieve efficient encoding of the identity permutation.
The encoding of AC coefficients proceeds in the order specified above; it keeps track of the number of remaining non-zeros in the current block, using that value, combined with the current position, to split coefficients into multiple distributions. No further values are present in the bitstream when it is known that no non-zero coefficient is left.

### Entropy Coding

The legacy JPEG format offers the choice of using Huffman coding12 or Arithmetic Coding13 as an entropy coder. Both of these options come with disadvantages: Huffman coding is sub-optimal when symbol probabilities are not exact powers of two, and Arithmetic Coding implementations typically have fairly slow decoding speed.
JPEG XL uses Asymmetric Numeral Systems14 (also known as ANS), a recently-introduced entropy coder that achieves compression ratios similar to Arithmetic Coding, while being significantly faster during decoding.
JPEG XL encodes in a single ANS stream symbols drawn from multiple different probability distributions. Two techniques are used to give more flexibility to encoders: distribution clustering and variable-precision distribution encoding.
A single ANS stream may contain symbols from thousands of different distributions. Encoding all of these distributions would use a significant amount of bits, making this choice sub-optimal for all but the longest of streams. Thus, JPEG XL allows defining clusters of similar distributions, with a single histogram being encoded for the whole cluster. This allows more flexibility than simply using fewer distributions, as the clustering can be defined per-file instead of being fixed. The encoding of the clusters uses a move-to-front transform and run-length encoding to minimize the bitstream overhead.
To further reduce the overhead for relatively small clusters, the encoder can choose between multiple different representations for the distributions themselves: a simple "flat" representation (that produces histograms with roughly uniform probabilities), useful for short streams, and a representation that stores, for each probability value, its magnitude and a variable number of less-significant bits, controllable on a per-histogram basis, that allows to further control the tradeoff between histogram and stream size.
Finally, to reduce the number of distinct symbols that get encoded in an ANS stream, which has beneficial effects on both histogram size and decoding speed of the entropy coder, many parts of JPEG XL use a hybrid unsigned integer encoding scheme: values below 16 are encoded as symbols directly, while any other value is encoded with a symbol that allows to recover the highest 2 bits set; other bits are stored uncompressed.




## Usage

### What image viewers support JPEG XL?

### What browsers support JPEG XL?

### What CDNs support JPEG XL?

### How can I convert images to JPEG XL?

### Do mobile phones support JPEG XL?

### Can I recompress my JPG images to JXL losslessly?

Lossless JPEG transcoding with ~20% size reduction;
CMYK JPEGs are not supported for transcoding, but they are very rare;[9]
Transcoding of progressive JPEGs is supported by the format but not yet implemented in the reference software;[10]

JPEG recompression allows smooth migration from legacy JPEG to JPEG XL: existing JPEG files can be losslessly transformed to the newer and more compact format.
The legacy JPEG format has been thoroughly explored18,19 over the years and most of its inefficiencies are addressed in the JPEG XL recompression format:
• more robust DC coefficient prediction is used
• AC0x and ACx0 coefficients are predicted on the base of neighboring blocks
• Huffman entropy encoding is replaced with ANS and Binary Arithmetic coding
• frequently used ICC profiles, Huffman code tables, and quantization tables are encoded as template parameters
• context modeling is used to separate entropy sources
• similar to the approach described in Section 4.8, DCT coefficients are reordered in a such way that more blocks have longer series of zeros at the end. The index of last non-zero coefficient is encoded explicitly, which is more efficient than limited RLE.
Those improvements enable 16% size savings on average in a corpus of 100 000 random images from the Internet. For larger photographic images, the savings are in the range 13%–22%, depending on the JPEG encoder and quality settings.

### Is JPEG XL backwards compatible?


## Comparison to other codecs

### How does JPEG XL compare to AVIF?

### How does JPEG XL compare to WebP2?

### How does JPEG XL compare to WebP?

### How does JPEG XL compare to HEIF?

### How does JPEG XL compare to JPEG2000?

### How does JPEG XL compare to JPEG?

### How does JPEG XL compare to PNG?

### How does JPEG XL compare to GIF?

### How does JPEG XL compare to SVG?

### How does JPEG XL compare to JPEG XR?

### How does JPEG XL compare to BMP?